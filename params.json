{"name":"Restaurantvote","tagline":"Sample:  JSON API using Hibernate/Spring/SpringMVC (without frontend)","body":"**Sample:  Hibernate/Spring/SpringMVC/REST**\r\n\r\n##Run sample\r\n\r\n**Maven:**\r\n\r\n  To run the application use Maven command line \r\n  ```\r\n  mvn clean spring-boot:run \r\n  ```\r\n**Use IDE:**\r\n\r\n  Run main method in [org.imakhnyk.interview.menuvoting.Application.java](https://github.com/ivanmakhnyk/restaurantvote/blob/master/src/main/java/org/imakhnyk/interview/menuvoting/Application.java)\r\n\r\n**Run as Jar file:**\r\n\r\n  Or you can build the JAR file with \r\n  ```\r\n  mvn clean package \r\n  ``` \r\n  and run the JAR by typing: \r\n  ``` \r\n  java -jar target/menuvoting-0.1.0.jar\r\n  ```\r\n\r\n**Logging:**\r\nLogging output is displayed. The service should be up and running within a few seconds.\r\n\r\n**Test the service:**\r\nNow that the web site is running, visit <http://localhost:8080/echo>, where you see:\r\n``` {  \"counter\": 0,  \"content\": \"Hello, World!\"}```\r\nProvide a name query string parameter with <http://localhost:8080/echo?name=Test>. Notice how the message changes from\r\n```{  \"counter\": 6,  \"content\": \"Hello, Test!\"}```\r\n\r\n## API document\r\nTo see API document open <http://localhost:8080/swagger-ui.html> (admin/adminp)\r\n\r\n![API screen](https://github.com/ivanmakhnyk/restaurantvote/blob/master/api.png?raw=true)\r\n\r\nApplication is connected to in memory database with mock data (for more details see [AppConfig.java](https://github.com/ivanmakhnyk/restaurantvote/blob/master/src/main/java/org/imakhnyk/interview/menuvoting/AppConfig.java) file):\r\n- Accouts to login (login/password): user/userp, admin/adminp, user1/user1p, user2/user2p, admin1/admin1p\r\n- Three restaurants mocked with few menu items for current date.\r\n\r\nTo change database [application.properties](https://github.com/ivanmakhnyk/restaurantvote/blob/master/src/main/resources/application.properties) config file should be updated (add SQL driver maven dependency)\r\n\r\n## Curl samples\r\n\r\nTest echo ```curl -X GET \"http://localhost:8080/echo?name=Test\"``` result ```{\"counter\":2,\"content\":\"Hello, Test!\"}```\r\n\r\n**Voting scenario**\r\n\r\nUser 'user' votes for restaurant with ID '7'\r\n```\r\ncurl --user user:userp -X POST --header \"Content-Type: application/json\" http://localhost:8080/vote/7\"\r\n```\r\nUsers 'user1' and 'user2' vote for restaurant with ID '8'\r\n```\r\ncurl --user user1:user1p -X POST --header \"Content-Type: application/json\" http://localhost:8080/vote/8\"\r\ncurl --user user2:user2p -X POST --header \"Content-Type: application/json\" http://localhost:8080/vote/8\"\r\n```\r\nAdmin request voting results\r\n```\r\ncurl --user admin:adminp -X GET  \"http://localhost:8080/vote\"\r\n```\r\n\r\nConsole example (curl request/response)\r\n```\r\ncurl --user user:userp -X POST --header \"Content-Type: application/json\" http://localhost:8080/vote/7\"\r\n{\"status\":\"ok\",\"message\":\"vote counted\"}\r\n\r\ncurl --user user1:user1p -X POST --header \"Content-Type: application/json\" http://localhost:8080/vote/8\"\r\n{\"status\":\"ok\",\"message\":\"vote counted\"}\r\n\r\ncurl --user user2:user2p -X POST --header \"Content-Type: application/json\" http://localhost:8080/vote/8\"\r\n{\"status\":\"ok\",\"message\":\"vote counted\"}\r\n\r\ncurl --user admin:adminp -X GET  \"http://localhost:8080/vote\"\r\n[\r\n\t{\"count\":0,\"restaurantId\":6,\"restaurantName\":\"Restaurant Perkins\"},\r\n\t{\"count\":0,\"restaurantId\":7,\"restaurantName\":\"Restaurant Cracker Barrel\"},\r\n\t{\"count\":0,\"restaurantId\":8,\"restaurantName\":\"Restaurant le Jules Verne - Tour Eiffel Paris\"}\r\n]\r\n```\r\n","google":"UA-69024733-1","note":"Don't delete this file! It's used internally to help with page regeneration."}